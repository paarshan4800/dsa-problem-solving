// You are given the root of a binary tree containing digits from 0 to 9 only.

// Each root-to-leaf path in the tree represents a number.

// For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
// Return the total sum of all root-to-leaf numbers. Test cases are generated so
// that the answer will fit in a 32-bit integer.

// A leaf node is a node with no children.

// Leetcode - https://leetcode.com/problems/sum-root-to-leaf-numbers/

// Input: root = [1,2,3]
// Output: 25
// Explanation:
// The root-to-leaf path 1->2 represents the number 12.
// The root-to-leaf path 1->3 represents the number 13.
// Therefore, sum = 12 + 13 = 25.

// Input: root = [4,9,0,5,1]
// Output: 1026
// Explanation:
// The root-to-leaf path 4->9->5 represents the number 495.
// The root-to-leaf path 4->9->1 represents the number 491.
// The root-to-leaf path 4->0 represents the number 40.
// Therefore, sum = 495 + 491 + 40 = 1026.

/**
 * Definition for a binary tree node. public class TreeNode { int val; TreeNode
 * left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left
 * = left; this.right = right; } }
 */
class Solution {

    // PREORDER TRAVERSAL

    public int sumNumbers(TreeNode root, int curNum) {
        // Base condition
        if (root == null)
            return 0;

        // If leaf node, generate number and return
        if (root.left == null && root.right == null) {
            return (curNum * 10) + root.val;
        }

        // Recur left and right
        // Return the sum of the two numbers generated by its left and right child
        return sumNumbers(root.left, (curNum * 10) + root.val) + sumNumbers(root.right, (curNum * 10) + root.val);
    }

    public int sumNumbers(TreeNode root) {
        return sumNumbers(root, 0);
    }
}